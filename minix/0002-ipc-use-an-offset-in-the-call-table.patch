From 9b512036ab7a18c1379086a416437707f67b8288 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=A9bastien=20Boisvert?= <sebastien.boisvert.3@ulaval.ca>
Date: Fri, 31 Aug 2012 09:22:31 -0400
Subject: [PATCH 2/2] ipc: use an offset in the call table
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Instead of using a loop to find a matching IPC call type, the
offset in the call table can be simply calculated in constant time.

Signed-off-by: SÃ©bastien Boisvert <sebastien.boisvert.3@ulaval.ca>
---
 servers/ipc/main.c |   45 +++++++++++++++++++++++++--------------------
 1 files changed, 25 insertions(+), 20 deletions(-)

diff --git a/servers/ipc/main.c b/servers/ipc/main.c
index 1eb9d6a..d1b1c5a 100644
--- a/servers/ipc/main.c
+++ b/servers/ipc/main.c
@@ -38,7 +38,7 @@ int main(int argc, char *argv[])
 
 	while (TRUE) {
 		int r;
-		int i;
+		int ipc_number;
 
 		if ((r = sef_receive(ANY, &m)) != OK)
 			printf("sef_receive failed %d.\n", r);
@@ -62,26 +62,34 @@ int main(int argc, char *argv[])
 			continue;
 		}
 
-		/* dispatch messages */
-		for (i = 0; i < SIZE(ipc_calls); i++) {
+		/*
+		 * The ipc number in the table can be obtained
+		 * with a simple equation because the values of
+		 * IPC system calls are consecutive and begin
+		 * at ( IPC_BASE + 1 )
+		 */
+		
+		ipc_number = call_type - (IPC_BASE + 1 );
 
-			if (ipc_calls[i].type == call_type) {
+		/* dispatch message */
+		if (ipc_number >= 0 && ipc_number < SIZE(ipc_calls)) {
 
-				/* If any process does an IPC call,
-				 * we have to know about it exiting.
-				 * Tell VM to watch it for us.
-				 */
-				if(vm_watch_exit(m.m_source) != OK) {
-					printf("IPC: watch failed on %d\n", m.m_source);
-				}
+			/* If any process does an IPC call,
+			 * we have to know about it exiting.
+			 * Tell VM to watch it for us.
+			 */
+			if(vm_watch_exit(m.m_source) != OK)
+				printf("IPC: watch failed on %d\n", m.m_source);
 
+			int result;
 
-				int result;
+			result = ipc_calls[ipc_number].func(&m);
 
-				result = ipc_calls[i].func(&m);
-
-				if (ipc_calls[i].reply)
-					break;
+			/*
+			 * The handler of the IPC call did not 
+			 * post a reply.
+			 */
+			if (!ipc_calls[ipc_number].reply) {
 
 				m.m_type = result;
 
@@ -91,11 +99,8 @@ int main(int argc, char *argv[])
 
 				if ((r = sendnb(who_e, &m)) != OK)
 					printf("IPC send error %d.\n", r);
-				break;
 			}
-		}
-
-		if (i == SIZE(ipc_calls)) {
+		} else {
 			/* warn and then ignore */
 			printf("IPC unknown call type: %d from %d.\n",
 				call_type, who_e);
-- 
1.7.8.6

