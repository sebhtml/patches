From adbace7bc2949486fc0e4b36a29833d69a22c8db Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=A9bastien=20Boisvert?= <sebastien.boisvert.3@ulaval.ca>
Date: Wed, 5 Sep 2012 21:17:19 -0400
Subject: [PATCH] ipc: use an offset in the system call table for faster
 handling
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Instead of using a loop to find a matching ipc (inter process
communication) system call type, the offset in the call table can be
simply calculated in constant time.

Also, when the interprocess communication server receives an ipc
system call from a process, ipc should tell VM to watch it only one.
This patch fixes that also. In the previous code, ipc was telling VM
to watch the process for each iteration of the matching loop. In the
case where the call type is matched in the last iteration, ipc would
tell VM to watch the process numerous times.

This patch was tested on Minix 10.0.2.15 3.2.1 i686 inside VirtualBox.

An initial version (in 2 separate patches) of this patch was reviewed
by David C. van Moolenbroek.

Signed-off-by: SÃ©bastien Boisvert <sebastien.boisvert.3@ulaval.ca>
---
 servers/ipc/main.c |   36 ++++++++++++++++++++++--------------
 1 file changed, 22 insertions(+), 14 deletions(-)

diff --git a/servers/ipc/main.c b/servers/ipc/main.c
index ef92bb1..d1b1c5a 100644
--- a/servers/ipc/main.c
+++ b/servers/ipc/main.c
@@ -38,7 +38,7 @@ int main(int argc, char *argv[])
 
 	while (TRUE) {
 		int r;
-		int i;
+		int ipc_number;
 
 		if ((r = sef_receive(ANY, &m)) != OK)
 			printf("sef_receive failed %d.\n", r);
@@ -62,23 +62,34 @@ int main(int argc, char *argv[])
 			continue;
 		}
 
-		/* dispatch messages */
-		for (i = 0; i < SIZE(ipc_calls); i++) {
+		/*
+		 * The ipc number in the table can be obtained
+		 * with a simple equation because the values of
+		 * IPC system calls are consecutive and begin
+		 * at ( IPC_BASE + 1 )
+		 */
+		
+		ipc_number = call_type - (IPC_BASE + 1 );
+
+		/* dispatch message */
+		if (ipc_number >= 0 && ipc_number < SIZE(ipc_calls)) {
+
 			/* If any process does an IPC call,
 			 * we have to know about it exiting.
 			 * Tell VM to watch it for us.
 			 */
-			if(vm_watch_exit(m.m_source) != OK) {
+			if(vm_watch_exit(m.m_source) != OK)
 				printf("IPC: watch failed on %d\n", m.m_source);
-			}
 
-			if (ipc_calls[i].type == call_type) {
-				int result;
+			int result;
 
-				result = ipc_calls[i].func(&m);
+			result = ipc_calls[ipc_number].func(&m);
 
-				if (ipc_calls[i].reply)
-					break;
+			/*
+			 * The handler of the IPC call did not 
+			 * post a reply.
+			 */
+			if (!ipc_calls[ipc_number].reply) {
 
 				m.m_type = result;
 
@@ -88,11 +99,8 @@ int main(int argc, char *argv[])
 
 				if ((r = sendnb(who_e, &m)) != OK)
 					printf("IPC send error %d.\n", r);
-				break;
 			}
-		}
-
-		if (i == SIZE(ipc_calls)) {
+		} else {
 			/* warn and then ignore */
 			printf("IPC unknown call type: %d from %d.\n",
 				call_type, who_e);
-- 
1.7.10

